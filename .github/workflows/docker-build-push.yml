name: Docker Build and Push

# Trigger on push to main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      push_image:
        description: 'Push image to registry'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

# Environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Build and push Docker image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    # Set permissions for GITHUB_TOKEN
    permissions:
      contents: read
      packages: write
      # For security scanning
      security-events: write
      # For attestation
      id-token: write
      attestations: write
    
    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better metadata

      # Step 2: Set up Docker Buildx for advanced features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest

      # Step 3: Log in to GitHub Container Registry
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Extract metadata for tagging
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Branch name
            type=ref,event=branch
            # PR number
            type=ref,event=pr
            # Commit SHA (short)
            type=sha,prefix={{branch}}-,format=short
            # Commit SHA (long)
            type=sha,prefix=sha-,format=long
            # Semantic versions (if tagged)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Build timestamp
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          labels: |
            org.opencontainers.image.title=Swap Optimizer Orchestrator
            org.opencontainers.image.description=Production-ready swap optimizer with health checks
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            maintainer=${{ github.repository_owner }}
            
      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_image != 'false') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
          # Generate SBOM and provenance
          sbom: true
          provenance: true

      # Step 6: Generate attestation for the image
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        if: github.event_name != 'pull_request'
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      # Step 7: Run security scan on the image
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      # Step 8: Upload scan results to GitHub Security
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-scanning'

      # Step 9: Create summary
      - name: Create job summary
        if: always()
        run: |
          echo "## Docker Build Summary 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "### Image Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Image:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "### Tags Published" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "### Pull Commands" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Pull by latest tag" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Pull by commit SHA" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Pull by digest (immutable)" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Pull Request Build" >> $GITHUB_STEP_SUMMARY
            echo "✅ Image built successfully (not pushed)" >> $GITHUB_STEP_SUMMARY
            echo "- PR #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Metadata" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  # Test the Docker image
  test-image:
    name: Test Docker Image
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: read
    
    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to Container Registry
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Pull the built image
      - name: Pull Docker image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }} test-image:latest

      # Step 4: Create .env file for testing
      - name: Create test environment
        run: |
          echo "INFURA_URL=https://mainnet.infura.io/v3/test_key" > .env
          echo "NODE_ENV=production" >> .env
          echo "PORT=3000" >> .env

      # Step 5: Run container and test health
      - name: Run container
        run: |
          docker run -d \
            --name test-container \
            -p 3000:3000 \
            -v $(pwd)/.env:/app/.env:ro \
            test-image:latest

      # Step 6: Wait for container to be ready
      - name: Wait for container
        run: |
          echo "Waiting for container to be ready..."
          for i in {1..30}; do
            if docker exec test-container curl -sf http://localhost:3000/healthz > /dev/null 2>&1; then
              echo "Container is ready!"
              break
            fi
            echo "Attempt $i/30: Container not ready yet..."
            sleep 2
          done

      # Step 7: Test health endpoints
      - name: Test endpoints
        run: |
          echo "Testing /healthz endpoint..."
          curl -sf http://localhost:3000/healthz | jq '.'
          
          echo "Testing /readyz endpoint..."
          curl -sf http://localhost:3000/readyz | jq '.' || true
          
          echo "Testing /metrics endpoint..."
          curl -sf http://localhost:3000/metrics | head -20

      # Step 8: Check container logs
      - name: Container logs
        if: always()
        run: |
          echo "Container logs:"
          docker logs test-container

      # Step 9: Clean up
      - name: Clean up
        if: always()
        run: |
          docker stop test-container || true
          docker rm test-container || true

  # Create release if tagged
  create-release:
    name: Create Release
    needs: [build-and-push, test-image]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      packages: read
    
    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Generate changelog
      - name: Generate changelog
        id: changelog
        run: |
          echo "## Docker Image" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Pull this version" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### What's Changed" >> release_notes.md
          echo "See [full changelog](https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${{ github.ref_name }})" >> release_notes.md

      # Step 3: Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          generate_release_notes: true
          append_body: true
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
